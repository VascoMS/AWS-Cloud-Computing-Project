SCALE_OUT_CPU_THRESHOLD = 0.75
CPU_SCALE_IN_THRESHOLD = 0.25
MIN_WORKERS = 1
MAX_WORKERS = 10

function autoscaler_tick():
    avg_cpu_util = get_avg_cpu_from_cloudwatch()
    global_queue_length = len(GLOBAL_OVERFLOW_QUEUE)
    active_vms = size(available_workers)

    # --- SCALE OUT ---
    if (avg_cpu_util > SCALE_OUT_CPU_THRESHOLD) or (global_queue_length > 0):
        if active_vms < MAX_WORKERS:
            scale_out()

    # --- SCALE IN ---
    elif (avg_cpu_util < CPU_SCALE_IN_THRESHOLD) and (active_vms > MIN_WORKERS):
        vm_id = select_vm_to_scale_in()
        if vm_id:
            load_balancer.initiate_worker_removal(vm_id)

function scale_out():
    new_worker_id = provision_new_worker()
    add_new_worker(new_worker_id)
    drain_global_queue(get_current_vm_loads())

function select_vm_to_scale_in():
    # Pick the least loaded non-draining worker
    min_load = inf
    candidate = null

    for vm_id, load_info in load_balancer.vm_loads.items():
        if vm_id in draining_workers:
            continue
        load = load_info.current_load + load_info.queued
        if load < min_load:
            min_load = load
            candidate = vm_id

    return candidate
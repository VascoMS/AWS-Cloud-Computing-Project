Load Balancer:

function handle_incoming_request(request):
    # Step 1: Estimate instruction count from MSS
    params = extract_parameters(request)
    estimated_complexity = estimate_complexity(params)

    # Step 2: Get current VM load map
    vm_loads = get_current_vm_loads()  # e.g., {vm1: 800000, vm2: 1500000}

    # Step 3: Identify VMs with available capacity
    VM_LOAD_THRESHOLD = 2_000_000  # Example max instruction load per VM
    THRESHOLD_T = 500_000          # Complexity threshold to consider for Lambda

    candidate_vms = []
    for vm_id, load in vm_loads.items():
        if load + estimated_complexity < VM_LOAD_THRESHOLD:
            candidate_vms.append((vm_id, load))

    # Step 4: Decision Logic
    if candidate_vms:
        # Choose VM with lowest load
        target_vm = min_load(candidate_vms)
        assign_to_vm(target_vm, request, estimated_complexity)
    else:
        if estimated_complexity < THRESHOLD_T:
            # Use Lambda as fast-path for low-complexity burst requests
            invoke_lambda(request)
        else:
            # Queue request to least-loaded VM, even if busy
            target_vm = min_load(vm_loads)
            queue_request_to_vm(target_vm, request, estimated_complexity)


function handle_autoscaler_request(request):
    if request.type == "GET_LOAD":
        # Respond with current VM loads
        return get_current_vm_loads()

    else if request.type == "ADD_WORKER":
        new_worker_id = request.content
        add_new_worker(new_worker_id)
        return { "status": "worker added", "worker_id": new_worker_id }

    else if request.type == "REMOVE_WORKER":
        worker_id = request.content
        remove_worker(worker_id)
        return { "status": "worker removed", "worker_id": worker_id }

    else:
        return { "error": "invalid autoscaler request type" }

function add_new_worker(new_worker_id):
    available_workers.add(new_worker_id)
    vm_instruction_load_map[new_worker_id] = 0

function remove_worker(worker_id):
    current_load = vm_instruction_load_map.get(worker_id, 0)
    available_workers.remove(worker_id)
    if current_load > 0:
        # Worker still busy â€“ do not remove
        return {
            "status": "rejected",
            "reason": "worker has pending or executing tasks",
            "worker_id": worker_id,
            "current_load": current_load
        }

    vm_instruction_load_map.remove(worker_id)

    return {
        "status": "worker removed",
        "worker_id": worker_id
    }

function estimate_complexity(params):
   complexity = local_cache.get(params)
   if complexity == null:
      complexity = fetch_from_mss(params)
   return complexity